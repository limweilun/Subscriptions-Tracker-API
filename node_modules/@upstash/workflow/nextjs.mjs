import {
  SDK_TELEMETRY,
  serveBase
} from "./chunk-U6XFLG7W.mjs";

// platforms/nextjs.ts
var serve = (routeFunction, options) => {
  const { handler: serveHandler } = serveBase(
    routeFunction,
    {
      sdk: SDK_TELEMETRY,
      framework: "nextjs",
      runtime: `node@${process.version}`
    },
    options
  );
  return {
    POST: async (request) => {
      return await serveHandler(request);
    }
  };
};
var servePagesRouter = (routeFunction, options) => {
  const { handler: serveHandler } = serveBase(
    routeFunction,
    {
      sdk: SDK_TELEMETRY,
      framework: "nextjs-pages",
      runtime: process.versions.bun ? `bun@${process.versions.bun}/node@${process.version}` : `node@${process.version}`
    },
    options
  );
  const handler = async (request_, res) => {
    if (request_.method?.toUpperCase() !== "POST") {
      res.status(405).json("Only POST requests are allowed in worklfows");
      return;
    } else if (!request_.url) {
      res.status(400).json("url not found in the request");
      return;
    }
    const protocol = request_.headers["x-forwarded-proto"];
    const baseUrl = options?.baseUrl ?? `${protocol}://${request_.headers.host}`;
    const request = new Request(options?.url ?? `${baseUrl}${request_.url}`, {
      body: (typeof request_.body === "string" ? request_.body : typeof request_.body === "undefined" ? void 0 : JSON.stringify(request_.body)) ?? "",
      headers: new Headers(request_.headersDistinct),
      method: "POST"
    });
    const response = await serveHandler(request);
    res.status(response.status).json(await response.json());
  };
  return { handler };
};
export {
  serve,
  servePagesRouter
};
